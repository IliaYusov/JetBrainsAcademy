type: edu
custom_name: stage4
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult

    import os
    import shutil

    import sys
    if sys.platform.startswith("win"):
        import _locale
        # pylint: disable=protected-access
        _locale._getdefaultlocale = (lambda *args: ['en_US', 'utf8'])

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class TextBasedBrowserTest(StageTest):

        def generate(self):

            dir_for_files = 'tb_tabs'
            return [
                TestCase(
                    stdin='bloomberg.com\nbloomberg\nexit',
                    attach='Bloomberg',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='nytimes.com\nnytimes\nexit',
                    attach='The New York Times',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='nytimescom\nexit',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='bloombergcom\nexit',
                    args=[dir_for_files]
                ),
            ]

        def _check_files(self, path_for_tabs: str, right_word: str) -> bool:
            """
            Helper which checks that browser saves visited url in files and
            provides access to them.

            :param path_for_tabs: directory which must contain saved tabs
            :param right_word: Word-marker which must be in right tab
            :return: True, if right_words is present in saved tab
            """

            path, dirs, filenames = next(os.walk(path_for_tabs))

            for file in filenames:
                print("file: {}".format(file))
                with open(os.path.join(path_for_tabs, file), 'r', encoding='utf-8') as tab:
                    content = tab.read()
                    print(content)
                    if 'html' in content and right_word in content:
                        return True

            return False

        def check(self, reply, attach):

            # Incorrect URL
            if attach is None:
                if '<p>' in reply:
                    return CheckResult.wrong('You haven\'t checked was URL correct')
                else:
                    return CheckResult.correct()

            # Correct URL
            if isinstance(attach, str):
                right_word = attach

                path_for_tabs = os.path.join(os.curdir, 'tb_tabs')

                if not os.path.isdir(path_for_tabs):
                    return CheckResult.wrong("There are no directory for tabs")

                if not self._check_files(path_for_tabs, right_word):
                    return CheckResult.wrong('There are no correct saved tabs')

                try:
                    shutil.rmtree(path_for_tabs)
                except PermissionError:
                    return CheckResult.wrong("Impossible to remove the directory for tabs. Perhaps you haven't closed some file?")

                if '<body' in reply and right_word in reply:
                    return CheckResult.correct()

                return CheckResult.wrong('You haven\'t print result of request')


    TextBasedBrowserTest('browser.browser').run_tests()
  learner_created: false
- name: browser/browser.py
  visible: true
  text: "import os\nimport sys\n\nnytimes_com = '''\nThis New Liquid Is Magnetic,\
    \ and Mesmerizing\n\nScientists have created “soft” magnets that can flow \nand\
    \ change shape, and that could be a boon to medicine \nand robotics. (Source:\
    \ New York Times)\n\n\nMost Wikipedia Profiles Are of Men. This Scientist Is Changing\
    \ That.\n\nJessica Wade has added nearly 700 Wikipedia biographies for\n important\
    \ female and minority scientists in less than two \n years.\n\n'''\n\nbloomberg_com\
    \ = '''\nThe Space Race: From Apollo 11 to Elon Musk\n\nIt's 50 years since the\
    \ world was gripped by historic images\n of Apollo 11, and Neil Armstrong -- the\
    \ first man to walk \n on the moon. It was the height of the Cold War, and the\
    \ charts\n were filled with David Bowie's Space Oddity, and Creedence's \n Bad\
    \ Moon Rising. The world is a very different place than \n it was 5 decades ago.\
    \ But how has the space race changed since\n the summer of '69? (Source: Bloomberg)\n\
    \n\nTwitter CEO Jack Dorsey Gives Talk at Apple Headquarters\n\nTwitter and Square\
    \ Chief Executive Officer Jack Dorsey \n addressed Apple Inc. employees at the\
    \ iPhone maker’s headquarters\n Tuesday, a signal of the strong ties between the\
    \ Silicon Valley giants.\n'''\n\n\nclass Browser:\n    def __init__(self):\n \
    \       self.dir = self.make_dir()\n        self.history = []\n\n    def make_dir(self):\n\
    \        if len(sys.argv) > 1:\n            dir_name = sys.argv[1] + '\\\\'\n\
    \            try:\n                os.mkdir(dir_name)\n            except FileExistsError:\n\
    \                pass\n        else:\n            dir_name = ''\n        return\
    \ dir_name\n\n    def save_to_dir(self, file_name, text=''):\n        try:\n \
    \           file = open(self.dir + file_name, 'w')\n            file.write(text)\n\
    \            file.close()\n            return None\n        except FileNotFoundError:\n\
    \            return None\n\n    def check_for_cache(self, file_name):\n      \
    \  try:\n            file = open(self.dir + file_name, 'r')\n            cache\
    \ = file.read()\n            file.close()\n            return cache\n        except\
    \ FileNotFoundError:\n            return None\n\n    def valid_url(self, url):\n\
    \        if '.' in url:\n            return True\n        return False\n\n   \
    \ def short_url(self, url):\n        return url.split('.')[0]\n\n    def show(self,\
    \ url):\n        if self.valid_url(url):\n            if url == 'bloomberg.com':\n\
    \                self.save_to_dir(self.short_url(url), bloomberg_com)\n      \
    \          self.history.append(self.short_url(url))\n                return bloomberg_com\n\
    \            elif url == 'nytimes.com':\n                self.save_to_dir(self.short_url(url),\
    \ nytimes_com)\n                self.history.append(self.short_url(url))\n   \
    \             return nytimes_com\n            else:\n                return 'error,\
    \ wrong url'\n        else:\n            if url == 'exit':\n                exit()\n\
    \            elif url == 'back':\n                if self.history:\n         \
    \           self.history.pop()\n                    return self.show(self.history.pop())\n\
    \                return None\n            cache = self.check_for_cache(self.short_url(url))\n\
    \            if cache:\n                return cache\n            else:\n    \
    \            return 'error, wrong url without dot'\n\n\nsafari = Browser()\nwhile\
    \ True:\n    print(safari.show(input()))\n"
  learner_created: false
- name: browser/tmp/google
  visible: true
  learner_created: true
- name: browser/tmp/steamgifts
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/79/stages/439/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/79/stages/439/implement">JetBrains
    Academy</a>
  time: Sat, 22 Aug 2020 22:03:09 UTC
record: 3
